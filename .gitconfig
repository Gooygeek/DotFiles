[user]
    name = Kieran Goldsworthy
    email = KieranG@kgol.xyz
    signingkey = 02D593760BD11087E481F55206828A9E8F1261BC
[core]
    # set vim as the default editor for commit messagees
    editor = vim
    autocrlf = input
    eol = lf
[include]
    # if my username and email are different for some reason use those stored in...
    path = .gitconfig.local
[merge]
    # using vim as my editor, it makes sense to use vimdiff as the merger
    tool = vimdiff
[color]
    # enable colours
    ui = true
[push]
    default = simple
[commit]
    template = ~/.gitmessage
    gpgSign = true
[alias]
    # Loads more at:
    # https://github.com/gitalias/gitalias

    # Add #
    a = add
    aa = add --all
    ai = add -i
    ap = add --patch  # Asked whether to add on a per-change basis
    unstage = reset HEAD --

    # Branch #
    b = branch
    br = branch

    # Pull & Push #
    pl = pull --tags
    ps = push
    f = fetch
    sy = !git fetch && git merge && git push  # Sync - Pulls then pushes
    # Publish the current branch by pushing it to the remote "origin",
    # and setting the current branch to track the upstream branch.
    publish = !"git push --set-upstream origin $(git branch-name)"
    # pull with rebase - to provide a cleaner, linear, bisectable history.
    #
    # To integrate changes between branches, you can merge or rebase.
    #
    # When we use "git pull", git does a fetch then a merge.
    # If we've made changes locally and someone else has pushed changes
    # to our git host then git will automatically merge these together
    # and create a merge commit that looks like this in the history:
    #
    #    12345678 - Merge branch 'foo' of bar into master
    #
    # When we use "git pull --rebase", git does a fetch then a rebase.
    # A rebase resets the HEAD of your local branch to be the same as
    # the remote HEAD, then replays your local commits back into repo.
    # This means you don't get any noisy merge messages in your history.
    # This gives us a linear history, and also helps with git bisect.
    #
    # To automatically do "pull --rebase" for any branch based on master:
    #
    #    git config branch.master.rebase true
    #
    # To automatically do "pull --rebase" for all branches:
    #
    #     git config --global branch.autosetuprebase always
    #
    pr = pull --rebase
    # pp - pull with rebase preserve of merge commits
    #
    # See https://stackoverflow.com/questions/21364636/git-pull-rebase-preserve-merges
    #
    # You should only rebase if you know (in a sort of general sense)
    # what you are doing, and if you do know what you are doing, then you
    # would probably prefer a merge-preserving rebase as a general rule.
    #
    # Although by the time you've decided that rebasing is a good idea,
    # you will probably find that a history that has its own embedded
    # branch-and-merge-points is not necessarily the correct "final
    # rewritten history".
    #
    # That is, if it's appropriate to do a rebase at all, it's at least fairly
    # likely that the history to be rebased is itself linear, so that the
    # preserve-vs-flatten question is moot anyway.
    pp = pull --rebase=preserve
    rb = rebase

    # Merge #
    m = merge
    mergetest = "!f(){ git merge --no-commit --no-ff \"$1\"; git merge --abort; echo \"Merge aborted\"; };f "

    # Commit #
    c = commit
    ci = commit --interactive
    ac = !git add --all && git commit -a  # aka Add + Commit
    fmaacp = !git fetch && git merge && git add --all && git commit -a && git push
    cp = cherry-pick

    # Checkout #
    co = checkout

    # Status #
    s = status
    stat = status
    ss = status --short --branch
    sstat = status --short --branch
    w = whatchanged

    # Diff #
    d = diff
    dh = diff HEAD
    dc = diff --cached  # Show changes not yet staged
    ds = diff --staged  # Show changes about to be commited
    dd = diff --check --dirstat --find-copies --find-renames --histogram --color  # diff deep - show changes with our preferred options.
    diff-deep = diff --check --dirstat --find-copies --find-renames --histogram --color  # Show changes with our preferred      options.
    # Diff the last commit for a given file. Usage 'git diff-file-last-commit <file>'
    diff-file-last-commit = "!f() { \
            project_root_dir=$(git rev-parse --show-toplevel); \
            echo finding full file path of $1 in $project_root_dir; \
            filepath=$(find $project_root_dir -type f -name $1); \
            echo full file path $filepath; \
            last_modified_commit_hash=$(git rev-list -1 HEAD $filepath); \
            echo last commit file modified $last_modified_commit_hash; \
            git difftool $last_modified_commit_hash^ $filepath -y; \
       }; f"


    # Grep #
    g = grep
    gg = grep --break --heading --line-number --color  # grep group - search with our preferred options.
    grep-group = grep --break --heading --line-number --color  # Search with our preferred options.
    grep-all = !"f() { git rev-list --all | xargs git grep \"$@\"; }; f" # Find text in any commit ever.

    # Log #
    l = log
    lg = log --graph --topo-order --date=short --abbrev-commit --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn]%Creset %Cblue%G?%Creset'
    hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short

    # Stash #
    st = stash
    sta = stash apply
    stl = stash list
    std = stash drop
    stp = stash push --message
    scheckpoint = "!bash -c \"git stash save $(date +%Y-%m-%d-%H:%M:%S) - $1 && git stash apply && git stash list -5 && echo 'Stopped at 5 (there may be more stashes) ...'\""

    # Ls #
    ls = ls-files
    ls-ignored = ls-files --others --i --exclude-standard
    rl = reflog

    # submodule - enables foreign repositories to be embedded within a dedicated subdirectory of the source tree.
    sm = submodule

    # Alias #
    alias = "!git config --get-regexp '^alias\\.' | cut -c 7- | sed 's/ / = /'"

    # Other #
    r = remote
    type = cat-file -t
    dump = cat-file -p

    # Advanced Log and Summary #

    # Show log of changes, most recent first
    log-changes = log --oneline --reverse
    # Show log of new commits after you fetched, with stats, excluding merges
    log-fresh = log ORIG_HEAD.. --stat --no-merges
    # Show log in our preferred format for our key performance indicators. A.k.a. `ll`.
    log-like = log --graph --topo-order --date=short --abbrev-commit --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn]%Creset %Cblue%G?%Creset'
    # Show log in our preferred format for our key performance indicators, with long items. A.k.a. `lll`.
    log-like-long = log --graph --topo-order --date=iso8601-strict --no-abbrev-commit --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn <%ce>]%Creset %Cblue%G?%Creset'
    # Show log with dates in our local timezone
    log-local = log --date=local
    # Show the log for my own commits by my own user email
    log-my = !git log --author $(git config user.email)
    # Show log as a graph
    log-graph = log --graph --all --oneline --decorate
    # Show the date of the earliest commit, in strict ISO 8601 format
    log-first-date = !"git log --date-order --format=%cI | tail -1"
    # Show the date of the latest commit, in strict ISO 8601 format
    log-latest-date = log -1 --date-order --format=%cI
    # Show the log of the recent hour, day, week, month, year
    log-hour  = log --since "1 hour ago"
    log-day   = log --since "1 day ago"
    log-week  = log --since "1 week ago"
    log-month = log --since "1 month ago"
    log-year  = log --since "1 year ago"
    # Show the log of my own recent hour, day, week, month, year
    log-my-hour  = log --author $(git config user.email) --since "1 hour ago"
    log-my-day   = log --author $(git config user.email) --since "1 day ago"
    log-my-week  = log --author $(git config user.email) --since "1 week ago"
    log-my-month = log --author $(git config user.email) --since "1 month ago"
    log-my-year  = log --author $(git config user.email) --since "1 year ago"
    # Show a specific format string and its number of log entries
    log-of-format-and-count = "!f() { format=\"$1\"; shift; git log $@ --format=oneline --format="$format" | awk '{a[$0]++}END{for(i in a){print i, a[i], int((a[i]/NR)*100) \"%\"}}' | sort; }; f"
    log-of-count-and-format = "!f() { format=\"$1\"; shift; git log $@ --format=oneline --format="$format" | awk '{a[$0]++}END{for(i in a){print a[i], int((a[i]/NR)*100) \"%\", i}}' | sort -nr; }; f"
    # Show the number of log entries by a specific format string and date format string
    log-of-format-and-count-with-date = "!f() { format=\"$1\"; shift; date_format=\"$1\"; shift; git log $@ --format=oneline --format=\"$format\" --date=format:\"$date_format\" | awk '{a[$0]++}END{for(i in a){print i, a[i], int((a[i]/NR)*100) \"%\"}}' | sort -r; }; f"
    log-of-count-and-format-with-date = "!f() { format=\"$1\"; shift; date_format=\"$1\"; shift; git log $@ --format=oneline --format=\"$format\" --date=format:\"$date_format\" | awk '{a[$0]++}END{for(i in a){print a[i], int((a[i]/NR)*100) \"%\", i}}' | sort -nr; }; f"
    # Show the number of log items by email
    log-of-email-and-count         = "!f() { git log-of-format-and-count \"%aE\" $@; }; f"
    log-of-count-and-email         = "!f() { git log-of-count-and-format \"%aE\" $@; }; f"
    # Show the number of log items by hour
    log-of-hour-and-count          = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y-%m-%dT%H\" $@ ; }; f"
    log-of-count-and-hour          = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y-%m-%dT%H\" $@ ; }; f"
    # Show the number of log items by day
    log-of-day-and-count           = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y-%m-%d\" $@ ; }; f"
    log-of-count-and-day           = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y-%m-%d\" $@ ; }; f"
    # Show the number of log items by week
    log-of-week-and-count          = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y#%V\" $@; }; f"
    log-of-count-and-week          = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y#%V\" $@; }; f"
    # Show the number of log items by month
    log-of-month-and-count         = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y-%m\" $@ ; }; f"
    log-of-count-and-month         = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y-%m\" $@ ; }; f"
    # Show the number of log items by year
    log-of-year-and-count          = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y\" $@ ; }; f"
    log-of-count-and-year          = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y\" $@ ; }; f"
    # Show the number of log items by hour of day
    log-of-hour-of-day-and-count   = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%H\" $@; }; f"
    log-of-count-and-hour-of-day   = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%H\" $@; }; f"
    # Show the number of log items by day of week
    log-of-day-of-week-and-count   = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%u\" $@; }; f"
    log-of-count-and-day-of-week   = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%u\" $@; }; f"
    # Show the number of log items by week of year
    log-of-week-of-year-and-count  = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%V\" $@; }; f"
    log-of-count-and-week-of-year  = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%V\" $@; }; f"
    # TODO
    log-refs = log --all --graph --decorate --oneline --simplify-by-decoration --no-merges
    log-timeline = log --format='%h %an %ar - %s'
    log-local = log --oneline origin..HEAD
    log-fetched = log --oneline HEAD..origin/master

    # chart: show a summary chart of activity per author.
    #
    # Example:
    #
    #     $ git chart
    #     ..X..........X...2..12 alice@example.com
    #     ....2..2..13.......... bob@example.com
    #     2.....1....11......... carol@example.com
    #     ..1............1..1... david@example.com
    #     ....1.......1.3.3.22.2 eve@example.com
    #
    # The chart rows are the authors.
    # TODO: sort the rows meaningfully,
    # such as alphabetically, or by count.
    #
    # The chart columns are the days.
    # The chart column prints one character per day.
    #
    #   * For 1-9 commits, show the number.
    #   * For 10 or more commits, show "X" as a visual indicator.
    #   * For no commits, show "." as a visual placeholder.
    #
    # The chart timeline adjusts the date range automatically:
    #
    #   * The timeline starts with the date of the earliest commit.
    #   * The timeline stops with the date of the latest commit.
    #   * The intent is to show the most relevant information.
    #
    chart = "!f() { \
        git log --format=oneline --format=\"%aE %at\" --since=\"48 days ago\" $@ | \
        awk ' \
        function time_to_slot(t) { return strftime(\"%Y-%m-%d\", t, true) } \
        function count_to_char(i) { return (i > 0) ? ((i < 10) ? i : \"X\") : \".\" } \
        BEGIN { \
        time_min = systime(); time_max = 0; \
        SECONDS_PER_DAY=86400; \
        } \
        { \
        item = $1; \
        time = 0 + $2; \
        if (time > time_max){ time_max = time } else if (time < time_min){ time_min = time }; \
        slot = time_to_slot(time); \
        items[item]++; \
        slots[slot]++; \
        views[item, slot]++; \
        } \
        END{ \
        printf(\"Chart time range %s to %s.\\n\", time_to_slot(time_min), time_to_slot(time_max)); \
        time_max_add = time_max += SECONDS_PER_DAY; \
        for(item in items){ \
            row = \"\"; \
            for(time = time_min; time < time_max_add; time += SECONDS_PER_DAY) { \
            slot = time_to_slot(time); \
            count = views[item, slot]; \
            row = row count_to_char(count); \
            } \
            print row, item; \
        } \
        }'; \
    }; f"

    # churn: show log of files that have many changes
    #
    #   * Written by (Corey Haines)[http://coreyhaines.com/]
    #   * Scriptified by Gary Bernhardt
    #   * Obtained from https://github.com/garybernhardt/dotfiles/blob/master/bin/git-churn
    #   * Edited for GitAlias.com repo by Joel Parker Henderson
    #   * Comments by Mislav http://mislav.uniqpath.com/2014/02/hidden-documentation/
    #
    # Show churn for whole repo:
    #
    #   $ git churn
    #
    # Show churn for specific directories:
    #
    #   $ git churn app lib
    #
    # Show churn for a time range:
    #
    #   $ git churn --since='1 month ago'
    #
    # These are all standard arguments to `git log`.
    #
    # It's possible to get valuable insight from history of a project not only
    # by viewing individual commits, but by analyzing sets of changes as a whole.
    # For instance, `git churn` compiles stats about which files change the most.
    #
    # For example, to see where work on an app was focused on in the past month:
    #
    #     $ git churn --since='1 month ago' app/ | tail
    #
    # This can also highlight potential problems with technical debt in a project.
    # A specific file changing too often is generally a red flag, since it probably
    # means the file either needed to be frequently fixed for bugs, or the file
    # holds too much responsibility and should be split into smaller units.
    #
    # Similar methods of history analysis can be employed to see which people were
    # responsible recently for development of a certain part of the codebase.
    #
    # For instance, to see who contributed most to the API part of an application:
    #
    #    $ git log --format='%an' --since='1 month ago' app/controllers/api/ | \
    #      sort | uniq -c | sort -rn | head
    #
    #    109 Alice Anderson
    #    13 Bob Brown
    #    7 Carol Clark
    #
    churn = !"f() { git log --all --find-copies --find-renames --name-only --format='format:' \"$@\" | awk 'NF{a[$0]++}END{for(i in a){print a[i], i}}' | sort -rn;};f"

    # summary: print a helpful summary of some typical metrics
    summary = "!f() { \
        printf \"Summary of this branch...\n\"; \
        printf \"%s\n\" $(git rev-parse --abbrev-ref HEAD); \
        printf \"%s first commit timestamp\n\" $(git log --date-order --format=%cI | tail -1); \
        printf \"%s latest commit timestamp\n\" $(git log -1 --date-order --format=%cI); \
        printf \"%d commit count\n\" $(git rev-list --count HEAD); \
        printf \"%d date count\n\" $(git log --format=oneline --format=\"%ad\" --date=format:\"%Y-%m-%d\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}'); \
        printf \"%d tag count\n\" $(git tag | wc -l); \
        printf \"%d author count\n\" $(git log --format=oneline --format=\"%aE\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}'); \
        printf \"%d committer count\n\" $(git log --format=oneline --format=\"%cE\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}'); \
        printf \"%d local branch count\n\" $(git branch | grep -v \" -> \" | wc -l); \
        printf \"%d remote branch count\n\" $(git branch -r | grep -v \" -> \" | wc -l); \
        printf \"\nSummary of this directory...\n\"; \
        printf \"%s\n\" $(pwd); \
        printf \"%d file count via git ls-files\n\" $(git ls-files | wc -l); \
        printf \"%d file count via find command\n\" $(find . | wc -l); \
        printf \"%d disk usage\n\" $(du -s | awk '{print $1}'); \
        printf \"\nMost-active authors, with commit count and %%...\n\"; git log-of-count-and-email | head -7; \
        printf \"\nMost-active dates, with commit count and %%...\n\"; git log-of-count-and-day | head -7; \
        printf \"\nMost-active files, with churn count\n\"; git churn | head -7; \
    }; f"

    # Advanced Other #

    # Create an archive file of everything in the repo
    backup = !"f() { top=$(git rev-parse --show-toplevel); cd $top; tar cvf $top.tar $top ; }; f"

    # Assume
    #
    # Sometimes we want to change a file in a repo, but never check in your edits.
    # We can't use .gitignore because the file is tracked. We use update-index.
    #
    # If you interact with big corporate projects, such as projects in Subversion,
    # then you might run into the need to ignore certain files which are under
    # Subversion control, yet you need to modify them but not commit.
    # The assume-unchanged flag comes to the rescue.
    #
    # Suppose we want to edit passwords.txt and for god's sake never check it in:
    #
    #     $ git status
    #     modified passwords.txt
    #     modified foo.txt
    #
    #     $ git assume passwords.txt
    #     $ git status
    #     modified foo.txt
    #
    #     $ git assumed
    #     passwords.txt
    #
    #     $ git unassume passwords.txt
    #     $ git status
    #     modified passwords.txt
    #     modified foo.txt
    #
    # Thanks to http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
    # Thanks to http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
    assume   = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assume-all = "!git st -s | awk {'print $2'} | xargs git assume"
    unassume-all = "!git assumed | xargs git update-index --no-assume-unchanged"
    assumed  = !"git ls-files -v | grep ^h | cut -c 3-"
